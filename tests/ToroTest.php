<?php

require(dirname(dirname(__FILE__)) . '/bootstrapTest.php');

/**
 * Test class for Toro.
 * Generated by PHPUnit on 2012-11-25 at 15:44:40.
 */
class ToroTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Toro
     */
    private $_request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->_request = new ToroRequest();
    }
    

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        // header_remove();
        parent::tearDown();
    }
    
    /**
     * Test initialisation of Toro
     */
    public function testInitState()
    {
        $o = new Toro();
        $this->assertFalse($o->initState());
        
        $o = new Toro(array());
        $this->assertFalse($o->initState());
        
        $o = new Toro(array(), $this->_request);
        $this->assertFalse($o->initState());
        
        $o = new Toro(array('/' => 'test'), $this->_request);
        $this->assertTrue($o->initState());
    }
    
    
    /**
     * @covers Toro
     * @runInSeparateProcess
     */
    public function testServeHeader404()
    {
        $o = new Toro(array('/' => 'test'), $this->_request);
        
        $o->serve();
        $this->assertEquals(404, http_response_code());
    }
    
    
    /**
     * @covers Toro
     * @runInSeparateProcess
     */
    public function testServePage()
    {
        $server = array('REQUEST_METHOD' => 'GET',
                        'PATH_INFO'      => '/',
                  );
        
        $route = array('/' => 'TestHandle');
        
        $o = new Toro($route, new ToroRequest('get', $server));
        
        ob_start();
        $o->serve();
        $out = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals('Test OK', $out);
    }
    
    /**
     * @covers Toro
     * @runInSeparateProcess
     */
    public function testServeCustom404()
    {
        $server = array('REQUEST_METHOD' => 'GET',
                        'PATH_INFO'      => '/error404/',
        );
        
        $route = array('404' => 'NotFound');
        
        
        $o = new Toro($route, new ToroRequest('get', $server));
        
        ob_start();
        $o->serve();
        $out = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals('404 NOT FOUND', $out);
    }
    
    
    /**
     * @covers Toro
     * @runInSeparateProcess
     */
    public function testServePageXhr()
    {
        $server = array('REQUEST_METHOD'         => 'GET',
                        'PATH_INFO'              => '/',
                        'HTTP_X_REQUESTED_WITH'  => 'XMLHttpRequest',
                  );
        
        $route = array('/' => 'TestHandle');
        
        $o = new Toro($route, new ToroRequest('get', $server));
        
        ob_start();
        $o->serve();
        $out = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals('Test OK XHR', $out);
    }
    
    
    /**
     * @covers Toro
     * @runInSeparateProcess
     */
    public function testServePageWithMask()
    {
        $server = array('REQUEST_METHOD' => 'GET',
                        'PATH_INFO'      => '/123/',
                  );
        
        $route = array('/:number/' => 'TestHandle');
        
        $o = new Toro($route, new ToroRequest('get', $server));
        
        ob_start();
        $o->serve();
        $out = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals('Test OK', $out);
    }
}
